{"version":3,"sources":["components/TopBar/TopBar.js","components/Wrapper/Wrapper.js","components/Tile/Tile.js","App.js","serviceWorker.js","index.js"],"names":["TopBar","props","react_default","a","createElement","className","children","Wrapper","Tile","onClick","handleTileClick","name","alt","src","image","App","initialState","tiles","clicked","score","state","character","_this","setState","Object","toConsumableArray","concat","i","length","alert","_this2","this","console","log","components_Wrapper_Wrapper","components_TopBar_TopBar","map","tile","components_Tile_Tile","id","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wrCAKeA,SAFA,SAAAC,GAAK,OAAKC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAUJ,EAAMK,YCEzCC,SAFC,SAAAN,GAAK,OAAGC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMK,YCQzCE,SARF,SAAAP,GAAK,OACjBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACfH,EAAAC,EAAAC,cAAA,OAAKK,QAAS,kBAAMR,EAAMS,gBAAgBT,EAAMU,OAAON,UAAW,OAAOO,IAAKX,EAAMU,KAAME,IAAKZ,EAAMa,YCmDxFC,6MA9CbC,aAAe,WACb,MAAO,CACLC,MAAOA,EACPC,QAAS,GACTC,MAAO,MASXC,MAAQ,CACNH,MAAOA,EACPC,QAAS,GACTC,MAAO,KAETT,gBAAkB,SAACW,GACjBC,EAAKC,SAAS,CAAEL,QAAQM,OAAAC,EAAA,EAAAD,CAAKF,EAAKF,MAAMF,SAAjBQ,OAAA,CAA0BL,IAAYF,MAAOG,EAAKF,MAAMD,MAAQ,IAEvF,IAAK,IAAIQ,EAAI,EAAGA,EAAIL,EAAKF,MAAMF,QAAQU,OAAQD,IACzCN,IAAcC,EAAKF,MAAMF,QAAQS,IACnCL,EAAKC,SAASD,EAAKN,gBAEE,KAApBM,EAAKF,MAAMD,QACZU,MAAM,iBACNP,EAAKC,SAASD,EAAKN,0FAMhB,IAAAc,EAAAC,KAEP,OADAC,QAAQC,IAAIF,KAAKX,MAAMF,QAASa,KAAKX,MAAMD,OAEzCjB,EAAAC,EAAAC,cAAC8B,EAAD,KACEhC,EAAAC,EAAAC,cAAC+B,EAAD,KAASJ,KAAKX,MAAMD,OACnBY,KAAKX,MAAMH,MAAMmB,IAAI,SAAAC,GAAI,OACxBnC,EAAAC,EAAAC,cAACkC,EAAD,CAAM5B,gBAAiBoB,EAAKpB,gBAAiBC,KAAM0B,EAAK1B,KAAMG,MAAOuB,EAAKvB,MAAOyB,GAAIF,EAAKE,GAAIC,IAAKH,EAAKE,eAzChGE,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9C,EAAAC,EAAAC,cAAC6C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ab709c92.chunk.js","sourcesContent":["import React from 'react'\r\nimport './TopBar.css'\r\n\r\nconst TopBar = props => (<div className='topBar'>{props.children}</div>)\r\n\r\nexport default TopBar","import React from 'react'\r\nimport './Wrapper.css'\r\n\r\nconst Wrapper = props=> <div className='wrapper'>{props.children}</div>\r\n\r\nexport default Wrapper","import React from 'react'\r\nimport \"./tile.css\"\r\n\r\nconst Tile = props =>(\r\n\t<div className=\"card\">\r\n\t\t<div className='img-container'>\r\n\t\t<img onClick={() => props.handleTileClick(props.name)} className= 'tile' alt={props.name} src={props.image} />\r\n\t\t</div>\r\n\t</div>\r\n)\r\n\r\nexport default Tile","import React, { Component } from 'react';\nimport './App.css';\nimport tiles from './components/icons.json'\nimport TopBar from './components/TopBar'\nimport Wrapper from './components/Wrapper'\nimport Tile from './components/Tile'\n\n\n\nclass App extends Component {\n\n  initialState = () => {\n    return {\n      tiles: tiles,\n      clicked: [],\n      score: 0,\n    }\n  }\n\n  // shuffle=()=>{\n  //   let randomNumber = Math.floor(Math.random()  * 17)\n  //   return randomNumber\n  // }\n\n  state = {\n    tiles: tiles,\n    clicked: [],\n    score: 0\n  }\n  handleTileClick = (character) => {\n    this.setState({ clicked: [...this.state.clicked, character], score: this.state.score + 1 })\n\n    for (var i = 0; i < this.state.clicked.length; i++) {\n      if (character === this.state.clicked[i]) {\n        this.setState(this.initialState())\n      }\n      if(this.state.score ===16){\n        alert('Yay, you won!')\n        this.setState(this.initialState())\n      }\n\n    }\n  }\n\n  render() {\n    console.log(this.state.clicked, this.state.score)\n    return (\n      <Wrapper>\n        <TopBar>{this.state.score}</TopBar>\n        {this.state.tiles.map(tile => (\n          <Tile handleTileClick={this.handleTileClick} name={tile.name} image={tile.image} id={tile.id} key={tile.id} />\n        ))}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}